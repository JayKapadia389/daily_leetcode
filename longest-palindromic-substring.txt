class Solution {
public:
    string longestPalindrome(string s) {
        
        int n = s.length() ; 

        if(n == 1){
            return s ; 
        }

        int mx_len = 1 ; 
        string mx_str = s.substr(0,1);

        for(int i = 0 ; i < n ; ++i){
            int diff = 1, l = i, r = i ; 

            while((i-diff) >= 0 && (i+diff) < n) {
                if(s[i-diff] == s[i+diff]){
                    l = i-diff ;
                    r = i+diff ; 
                }
                else{
                    break;
                }
                ++diff;
            }

            if(mx_len < (r - l +1)){
                mx_len = (r - l +1) ; 
                mx_str = s.substr(l , mx_len ) ; 
            }
        }

        // even length
        for(int i = 0 ; i < n - 1 ; ++i){
            int diff = 1, l = i, r = i+1 ; 

            if(s[l] != s[r]){
                continue ; 
            }

            while((i-diff) >= 0 && (i+diff+1) < n) {
                if(s[i-diff] == s[i+diff+1]){
                    l = i-diff ;
                    r = i+diff+1 ; 
                }
                else{
                    break;
                }
                ++diff ;
            }

            if(mx_len < (r - l +1)){
                mx_len = (r - l +1) ; 
                mx_str = s.substr(l , mx_len ) ; 
            }
        }

        return mx_str ; 

    }
};